// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_rows_V_dout,
        img_rows_V_empty_n,
        img_rows_V_read,
        img_cols_V_dout,
        img_cols_V_empty_n,
        img_cols_V_read,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        AXI_video_strm_V_data_V_din,
        AXI_video_strm_V_data_V_full_n,
        AXI_video_strm_V_data_V_write,
        AXI_video_strm_V_keep_V_din,
        AXI_video_strm_V_keep_V_full_n,
        AXI_video_strm_V_keep_V_write,
        AXI_video_strm_V_strb_V_din,
        AXI_video_strm_V_strb_V_full_n,
        AXI_video_strm_V_strb_V_write,
        AXI_video_strm_V_user_V_din,
        AXI_video_strm_V_user_V_full_n,
        AXI_video_strm_V_user_V_write,
        AXI_video_strm_V_last_V_din,
        AXI_video_strm_V_last_V_full_n,
        AXI_video_strm_V_last_V_write,
        AXI_video_strm_V_id_V_din,
        AXI_video_strm_V_id_V_full_n,
        AXI_video_strm_V_id_V_write,
        AXI_video_strm_V_dest_V_din,
        AXI_video_strm_V_dest_V_full_n,
        AXI_video_strm_V_dest_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] img_rows_V_dout;
input   img_rows_V_empty_n;
output   img_rows_V_read;
input  [31:0] img_cols_V_dout;
input   img_cols_V_empty_n;
output   img_cols_V_read;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output  [23:0] AXI_video_strm_V_data_V_din;
input   AXI_video_strm_V_data_V_full_n;
output   AXI_video_strm_V_data_V_write;
output  [2:0] AXI_video_strm_V_keep_V_din;
input   AXI_video_strm_V_keep_V_full_n;
output   AXI_video_strm_V_keep_V_write;
output  [2:0] AXI_video_strm_V_strb_V_din;
input   AXI_video_strm_V_strb_V_full_n;
output   AXI_video_strm_V_strb_V_write;
output  [0:0] AXI_video_strm_V_user_V_din;
input   AXI_video_strm_V_user_V_full_n;
output   AXI_video_strm_V_user_V_write;
output  [0:0] AXI_video_strm_V_last_V_din;
input   AXI_video_strm_V_last_V_full_n;
output   AXI_video_strm_V_last_V_write;
output  [0:0] AXI_video_strm_V_id_V_din;
input   AXI_video_strm_V_id_V_full_n;
output   AXI_video_strm_V_id_V_write;
output  [0:0] AXI_video_strm_V_dest_V_din;
input   AXI_video_strm_V_dest_V_full_n;
output   AXI_video_strm_V_dest_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_rows_V_read;
reg img_cols_V_read;
reg img_data_stream_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_rows_V_blk_n;
reg    img_cols_V_blk_n;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_270;
reg    AXI_video_strm_V_data_V_blk_n;
reg    AXI_video_strm_V_keep_V_blk_n;
reg    AXI_video_strm_V_strb_V_blk_n;
reg    AXI_video_strm_V_user_V_blk_n;
reg    AXI_video_strm_V_last_V_blk_n;
reg    AXI_video_strm_V_id_V_blk_n;
reg    AXI_video_strm_V_dest_V_blk_n;
reg   [10:0] t_V_2_reg_156;
wire   [11:0] tmp_fu_167_p1;
reg   [11:0] tmp_reg_246;
reg    ap_block_state1;
wire   [11:0] tmp_4_fu_171_p1;
reg   [11:0] tmp_4_reg_251;
wire   [11:0] r_V_fu_175_p2;
reg   [11:0] r_V_reg_256;
wire   [0:0] exitcond2_i_fu_190_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_V_fu_195_p2;
reg   [10:0] i_V_reg_265;
wire   [0:0] exitcond_i_fu_205_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    AXI_video_strm_V_id_V1_status;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_V_fu_210_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_216_p2;
reg   [0:0] axi_last_V_reg_279;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [10:0] t_V_reg_145;
wire    ap_CS_fsm_state5;
reg    AXI_video_strm_V_id_V1_update;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] tmp_user_V_fu_94;
wire   [11:0] t_V_cast_i_fu_186_p1;
wire   [11:0] t_V_2_cast_i_fu_201_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_190_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond2_i_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond2_i_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_2_reg_156 <= j_V_fu_210_p2;
    end else if (((exitcond2_i_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_156 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_145 <= i_V_reg_265;
    end else if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_145 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_94 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_94 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        axi_last_V_reg_279 <= axi_last_V_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_270 <= exitcond_i_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_265 <= i_V_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_reg_256 <= r_V_fu_175_p2;
        tmp_4_reg_251 <= tmp_4_fu_171_p1;
        tmp_reg_246 <= tmp_fu_167_p1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_blk_n = AXI_video_strm_V_data_V_full_n;
    end else begin
        AXI_video_strm_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_blk_n = AXI_video_strm_V_dest_V_full_n;
    end else begin
        AXI_video_strm_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AXI_video_strm_V_id_V1_update = 1'b1;
    end else begin
        AXI_video_strm_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_blk_n = AXI_video_strm_V_id_V_full_n;
    end else begin
        AXI_video_strm_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_blk_n = AXI_video_strm_V_keep_V_full_n;
    end else begin
        AXI_video_strm_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_blk_n = AXI_video_strm_V_last_V_full_n;
    end else begin
        AXI_video_strm_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_blk_n = AXI_video_strm_V_strb_V_full_n;
    end else begin
        AXI_video_strm_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_blk_n = AXI_video_strm_V_user_V_full_n;
    end else begin
        AXI_video_strm_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_205_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_190_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_190_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_blk_n = img_cols_V_empty_n;
    end else begin
        img_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_read = 1'b1;
    end else begin
        img_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_blk_n = img_rows_V_empty_n;
    end else begin
        img_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_read = 1'b1;
    end else begin
        img_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_205_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_205_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_din = {{16'd65535}, {img_data_stream_V_dout}};

assign AXI_video_strm_V_data_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_dest_V_din = 1'd0;

assign AXI_video_strm_V_dest_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_id_V1_status = (AXI_video_strm_V_user_V_full_n & AXI_video_strm_V_strb_V_full_n & AXI_video_strm_V_last_V_full_n & AXI_video_strm_V_keep_V_full_n & AXI_video_strm_V_id_V_full_n & AXI_video_strm_V_dest_V_full_n & AXI_video_strm_V_data_V_full_n);

assign AXI_video_strm_V_id_V_din = 1'd0;

assign AXI_video_strm_V_id_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_keep_V_din = 3'd7;

assign AXI_video_strm_V_keep_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_last_V_din = axi_last_V_reg_279;

assign AXI_video_strm_V_last_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_strb_V_din = 3'd0;

assign AXI_video_strm_V_strb_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_user_V_din = tmp_user_V_fu_94;

assign AXI_video_strm_V_user_V_write = AXI_video_strm_V_id_V1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_270 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status)) | ((exitcond_i_reg_270 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_270 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status)) | ((exitcond_i_reg_270 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_270 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status)) | ((exitcond_i_reg_270 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_i_reg_270 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status)) | ((exitcond_i_reg_270 == 1'd0) & (img_data_stream_V_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_216_p2 = ((t_V_2_cast_i_fu_201_p1 == r_V_reg_256) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_190_p2 = ((t_V_cast_i_fu_186_p1 == tmp_reg_246) ? 1'b1 : 1'b0);

assign exitcond_i_fu_205_p2 = ((t_V_2_cast_i_fu_201_p1 == tmp_4_reg_251) ? 1'b1 : 1'b0);

assign i_V_fu_195_p2 = (t_V_reg_145 + 11'd1);

assign j_V_fu_210_p2 = (t_V_2_reg_156 + 11'd1);

assign r_V_fu_175_p2 = ($signed(12'd4095) + $signed(tmp_4_fu_171_p1));

assign t_V_2_cast_i_fu_201_p1 = t_V_2_reg_156;

assign t_V_cast_i_fu_186_p1 = t_V_reg_145;

assign tmp_4_fu_171_p1 = img_cols_V_dout[11:0];

assign tmp_fu_167_p1 = img_rows_V_dout[11:0];

endmodule //Mat2AXIvideo
