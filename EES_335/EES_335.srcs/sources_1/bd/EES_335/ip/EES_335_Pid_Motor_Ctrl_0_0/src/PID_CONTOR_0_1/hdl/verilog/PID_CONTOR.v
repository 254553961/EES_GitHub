// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PID_CONTOR,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=279,HLS_SYN_LUT=378}" *)

module PID_CONTOR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Kp,
        Ki,
        Kd,
        err,
        err_ap_vld,
        dir,
        dir_ap_vld,
        dir_contor,
        dir_contor_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] Kp;
input  [15:0] Ki;
input  [15:0] Kd;
input  [15:0] err;
input   err_ap_vld;
output  [7:0] dir;
output   dir_ap_vld;
input  [0:0] dir_contor;
input   dir_contor_ap_vld;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dir_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] err_preg;
reg   [15:0] err_in_sig;
reg    err_ap_vld_preg;
reg    err_ap_vld_in_sig;
reg   [0:0] dir_contor_preg;
reg   [0:0] dir_contor_in_sig;
reg    dir_contor_ap_vld_preg;
reg    dir_contor_ap_vld_in_sig;
reg   [31:0] SumError;
reg   [31:0] LastError;
reg    err_blk_n;
reg    dir_contor_blk_n;
wire  signed [31:0] tmp_fu_105_p1;
reg  signed [31:0] tmp_reg_275;
reg    ap_block_state1;
wire  signed [31:0] tmp_1_fu_125_p2;
reg  signed [31:0] tmp_1_reg_280;
wire  signed [31:0] tmp_2_fu_141_p2;
reg  signed [31:0] tmp_2_reg_285;
wire   [31:0] tmp_6_fu_163_p2;
reg   [31:0] tmp_6_reg_295;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_8_fu_172_p2;
reg   [31:0] tmp_8_reg_300;
wire  signed [31:0] grp_fu_267_p3;
reg  signed [31:0] tmp_s_reg_305;
wire    ap_CS_fsm_state3;
wire   [31:0] abs_fu_200_p3;
wire    ap_CS_fsm_state4;
wire  signed [15:0] tmp_6_fu_163_p1;
wire  signed [15:0] tmp_8_fu_172_p1;
wire   [0:0] abscond_fu_195_p2;
(* use_dsp48 = "no" *) wire   [31:0] neg_fu_190_p2;
wire   [0:0] not_abscond_fu_236_p2;
wire   [7:0] tmp_13_cast_fu_242_p3;
wire   [7:0] tmp_11_fu_233_p1;
wire  signed [15:0] grp_fu_267_p1;
wire   [31:0] grp_fu_267_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 err_preg = 16'd0;
#0 err_ap_vld_preg = 1'b0;
#0 dir_contor_preg = 1'd0;
#0 dir_contor_ap_vld_preg = 1'b0;
#0 SumError = 32'd0;
#0 LastError = 32'd0;
end

PID_CONTOR_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
PID_CONTOR_mac_mubkb_U1(
    .din0(Kp),
    .din1(grp_fu_267_p1),
    .din2(grp_fu_267_p2),
    .dout(grp_fu_267_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dir_contor_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            dir_contor_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (dir_contor_ap_vld == 1'b1))) begin
            dir_contor_ap_vld_preg <= dir_contor_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dir_contor_preg <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (dir_contor_ap_vld == 1'b1))) begin
            dir_contor_preg <= dir_contor;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        err_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            err_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (err_ap_vld == 1'b1))) begin
            err_ap_vld_preg <= err_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        err_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (err_ap_vld == 1'b1))) begin
            err_preg <= err;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (dir_contor_ap_vld_in_sig == 1'b0) | (err_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        LastError <= tmp_fu_105_p1;
        SumError <= tmp_1_fu_125_p2;
        tmp_1_reg_280 <= tmp_1_fu_125_p2;
        tmp_2_reg_285 <= tmp_2_fu_141_p2;
        tmp_reg_275 <= tmp_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_6_reg_295 <= tmp_6_fu_163_p2;
        tmp_8_reg_300 <= tmp_8_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_s_reg_305 <= grp_fu_267_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dir_ap_vld = 1'b1;
    end else begin
        dir_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((dir_contor_ap_vld == 1'b1)) begin
        dir_contor_ap_vld_in_sig = dir_contor_ap_vld;
    end else begin
        dir_contor_ap_vld_in_sig = dir_contor_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dir_contor_blk_n = dir_contor_ap_vld;
    end else begin
        dir_contor_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dir_contor_ap_vld == 1'b1)) begin
        dir_contor_in_sig = dir_contor;
    end else begin
        dir_contor_in_sig = dir_contor_preg;
    end
end

always @ (*) begin
    if ((err_ap_vld == 1'b1)) begin
        err_ap_vld_in_sig = err_ap_vld;
    end else begin
        err_ap_vld_in_sig = err_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        err_blk_n = err_ap_vld;
    end else begin
        err_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((err_ap_vld == 1'b1)) begin
        err_in_sig = err;
    end else begin
        err_in_sig = err_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (dir_contor_ap_vld_in_sig == 1'b0) | (err_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_200_p3 = ((abscond_fu_195_p2[0:0] === 1'b1) ? tmp_s_reg_305 : neg_fu_190_p2);

assign abscond_fu_195_p2 = (($signed(tmp_s_reg_305) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (dir_contor_ap_vld_in_sig == 1'b0) | (err_ap_vld_in_sig == 1'b0));
end

assign ap_return = {{abs_fu_200_p3[18:3]}};

assign dir = (tmp_13_cast_fu_242_p3 ^ tmp_11_fu_233_p1);

assign grp_fu_267_p1 = tmp_reg_275;

assign grp_fu_267_p2 = (tmp_6_reg_295 + tmp_8_reg_300);

assign neg_fu_190_p2 = ($signed(32'd0) - $signed(tmp_s_reg_305));

assign not_abscond_fu_236_p2 = (1'd1 ^ abscond_fu_195_p2);

assign tmp_11_fu_233_p1 = dir_contor_in_sig;

assign tmp_13_cast_fu_242_p3 = ((not_abscond_fu_236_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp_1_fu_125_p2 = ($signed(SumError) + $signed(tmp_fu_105_p1));

assign tmp_2_fu_141_p2 = ($signed(tmp_fu_105_p1) - $signed(LastError));

assign tmp_6_fu_163_p1 = Ki;

assign tmp_6_fu_163_p2 = ($signed(tmp_1_reg_280) * $signed(tmp_6_fu_163_p1));

assign tmp_8_fu_172_p1 = Kd;

assign tmp_8_fu_172_p2 = ($signed(tmp_2_reg_285) * $signed(tmp_8_fu_172_p1));

assign tmp_fu_105_p1 = $signed(err_in_sig);

endmodule //PID_CONTOR
