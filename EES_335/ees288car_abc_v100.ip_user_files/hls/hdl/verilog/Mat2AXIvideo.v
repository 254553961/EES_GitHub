// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_rows_V_read,
        img_cols_V_read,
        img_data_stream_0_V,
        img_data_stream_1_V,
        img_data_stream_2_V,
        AXI_video_strm_V_data_V_din,
        AXI_video_strm_V_data_V_full_n,
        AXI_video_strm_V_data_V_write,
        AXI_video_strm_V_keep_V_din,
        AXI_video_strm_V_keep_V_full_n,
        AXI_video_strm_V_keep_V_write,
        AXI_video_strm_V_strb_V_din,
        AXI_video_strm_V_strb_V_full_n,
        AXI_video_strm_V_strb_V_write,
        AXI_video_strm_V_user_V_din,
        AXI_video_strm_V_user_V_full_n,
        AXI_video_strm_V_user_V_write,
        AXI_video_strm_V_last_V_din,
        AXI_video_strm_V_last_V_full_n,
        AXI_video_strm_V_last_V_write,
        AXI_video_strm_V_id_V_din,
        AXI_video_strm_V_id_V_full_n,
        AXI_video_strm_V_id_V_write,
        AXI_video_strm_V_dest_V_din,
        AXI_video_strm_V_dest_V_full_n,
        AXI_video_strm_V_dest_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] img_rows_V_read;
input  [31:0] img_cols_V_read;
input  [7:0] img_data_stream_0_V;
input  [7:0] img_data_stream_1_V;
input  [7:0] img_data_stream_2_V;
output  [23:0] AXI_video_strm_V_data_V_din;
input   AXI_video_strm_V_data_V_full_n;
output   AXI_video_strm_V_data_V_write;
output  [2:0] AXI_video_strm_V_keep_V_din;
input   AXI_video_strm_V_keep_V_full_n;
output   AXI_video_strm_V_keep_V_write;
output  [2:0] AXI_video_strm_V_strb_V_din;
input   AXI_video_strm_V_strb_V_full_n;
output   AXI_video_strm_V_strb_V_write;
output  [0:0] AXI_video_strm_V_user_V_din;
input   AXI_video_strm_V_user_V_full_n;
output   AXI_video_strm_V_user_V_write;
output  [0:0] AXI_video_strm_V_last_V_din;
input   AXI_video_strm_V_last_V_full_n;
output   AXI_video_strm_V_last_V_write;
output  [0:0] AXI_video_strm_V_id_V_din;
input   AXI_video_strm_V_id_V_full_n;
output   AXI_video_strm_V_id_V_write;
output  [0:0] AXI_video_strm_V_dest_V_din;
input   AXI_video_strm_V_dest_V_full_n;
output   AXI_video_strm_V_dest_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    AXI_video_strm_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_353;
reg    AXI_video_strm_V_keep_V_blk_n;
reg    AXI_video_strm_V_strb_V_blk_n;
reg    AXI_video_strm_V_user_V_blk_n;
reg    AXI_video_strm_V_last_V_blk_n;
reg    AXI_video_strm_V_id_V_blk_n;
reg    AXI_video_strm_V_dest_V_blk_n;
reg   [31:0] t_V_1_reg_248;
reg    ap_block_state1;
wire   [32:0] r_V_fu_263_p2;
reg   [32:0] r_V_reg_339;
wire   [0:0] exitcond1_fu_274_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_279_p2;
reg   [31:0] i_V_reg_348;
wire   [0:0] exitcond_fu_285_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    AXI_video_strm_V_id_V1_status;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_290_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_300_p2;
reg   [0:0] axi_last_V_reg_362;
reg   [7:0] tmp_6_reg_367;
reg   [7:0] tmp_7_reg_372;
reg   [7:0] tmp_5_reg_377;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_237;
wire    ap_CS_fsm_state5;
reg    AXI_video_strm_V_id_V1_update;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] tmp_user_V_fu_174;
wire   [32:0] lhs_V_cast_fu_259_p1;
wire   [32:0] tmp_6_cast_fu_296_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond1_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_248 <= j_V_fu_290_p2;
    end else if (((exitcond1_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_237 <= i_V_reg_348;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_353 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_174 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_174 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        axi_last_V_reg_362 <= axi_last_V_fu_300_p2;
        tmp_5_reg_377 <= img_data_stream_2_V;
        tmp_6_reg_367 <= img_data_stream_0_V;
        tmp_7_reg_372 <= img_data_stream_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_353 <= exitcond_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_348 <= i_V_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_reg_339 <= r_V_fu_263_p2;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_blk_n = AXI_video_strm_V_data_V_full_n;
    end else begin
        AXI_video_strm_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_blk_n = AXI_video_strm_V_dest_V_full_n;
    end else begin
        AXI_video_strm_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AXI_video_strm_V_id_V1_update = 1'b1;
    end else begin
        AXI_video_strm_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_blk_n = AXI_video_strm_V_id_V_full_n;
    end else begin
        AXI_video_strm_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_blk_n = AXI_video_strm_V_keep_V_full_n;
    end else begin
        AXI_video_strm_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_blk_n = AXI_video_strm_V_last_V_full_n;
    end else begin
        AXI_video_strm_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_blk_n = AXI_video_strm_V_strb_V_full_n;
    end else begin
        AXI_video_strm_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_353 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_blk_n = AXI_video_strm_V_user_V_full_n;
    end else begin
        AXI_video_strm_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_285_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_din = {{{tmp_5_reg_377}, {tmp_7_reg_372}}, {tmp_6_reg_367}};

assign AXI_video_strm_V_data_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_dest_V_din = 1'd0;

assign AXI_video_strm_V_dest_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_id_V1_status = (AXI_video_strm_V_user_V_full_n & AXI_video_strm_V_strb_V_full_n & AXI_video_strm_V_last_V_full_n & AXI_video_strm_V_keep_V_full_n & AXI_video_strm_V_id_V_full_n & AXI_video_strm_V_dest_V_full_n & AXI_video_strm_V_data_V_full_n);

assign AXI_video_strm_V_id_V_din = 1'd0;

assign AXI_video_strm_V_id_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_keep_V_din = 3'd7;

assign AXI_video_strm_V_keep_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_last_V_din = axi_last_V_reg_362;

assign AXI_video_strm_V_last_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_strb_V_din = 3'd0;

assign AXI_video_strm_V_strb_V_write = AXI_video_strm_V_id_V1_update;

assign AXI_video_strm_V_user_V_din = tmp_user_V_fu_174;

assign AXI_video_strm_V_user_V_write = AXI_video_strm_V_id_V1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_353 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_353 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_353 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_reg_353 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V1_status));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_300_p2 = ((tmp_6_cast_fu_296_p1 == r_V_reg_339) ? 1'b1 : 1'b0);

assign exitcond1_fu_274_p2 = ((t_V_reg_237 == img_rows_V_read) ? 1'b1 : 1'b0);

assign exitcond_fu_285_p2 = ((t_V_1_reg_248 == img_cols_V_read) ? 1'b1 : 1'b0);

assign i_V_fu_279_p2 = (t_V_reg_237 + 32'd1);

assign j_V_fu_290_p2 = (t_V_1_reg_248 + 32'd1);

assign lhs_V_cast_fu_259_p1 = img_cols_V_read;

assign r_V_fu_263_p2 = ($signed(lhs_V_cast_fu_259_p1) + $signed(33'd8589934591));

assign tmp_6_cast_fu_296_p1 = t_V_1_reg_248;

endmodule //Mat2AXIvideo
