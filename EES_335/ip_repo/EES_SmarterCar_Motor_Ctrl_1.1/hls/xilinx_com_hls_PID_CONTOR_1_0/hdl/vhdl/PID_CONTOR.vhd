-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PID_CONTOR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Kp : IN STD_LOGIC_VECTOR (15 downto 0);
    Ki : IN STD_LOGIC_VECTOR (15 downto 0);
    Kd : IN STD_LOGIC_VECTOR (15 downto 0);
    err : IN STD_LOGIC_VECTOR (15 downto 0);
    err_ap_vld : IN STD_LOGIC;
    dir : OUT STD_LOGIC_VECTOR (7 downto 0);
    dir_ap_vld : OUT STD_LOGIC;
    dir_contor : IN STD_LOGIC_VECTOR (0 downto 0);
    dir_contor_ap_vld : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of PID_CONTOR is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PID_CONTOR,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=279,HLS_SYN_LUT=378}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal err_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal err_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal err_ap_vld_preg : STD_LOGIC := '0';
    signal err_ap_vld_in_sig : STD_LOGIC;
    signal dir_contor_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dir_contor_in_sig : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_contor_ap_vld_preg : STD_LOGIC := '0';
    signal dir_contor_ap_vld_in_sig : STD_LOGIC;
    signal SumError : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal LastError : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal err_blk_n : STD_LOGIC;
    signal dir_contor_blk_n : STD_LOGIC;
    signal tmp_fu_105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal abs_fu_200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_fu_163_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal abscond_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of neg_fu_190_p2 : signal is "no";
    signal not_abscond_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_cast_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component PID_CONTOR_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    PID_CONTOR_mac_mubkb_U1 : component PID_CONTOR_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => Kp,
        din1 => grp_fu_267_p1,
        din2 => grp_fu_267_p2,
        dout => grp_fu_267_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dir_contor_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dir_contor_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    dir_contor_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (dir_contor_ap_vld = ap_const_logic_1))) then 
                    dir_contor_ap_vld_preg <= dir_contor_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    dir_contor_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dir_contor_preg <= ap_const_lv1_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (dir_contor_ap_vld = ap_const_logic_1))) then 
                    dir_contor_preg <= dir_contor;
                end if; 
            end if;
        end if;
    end process;


    err_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                err_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    err_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (err_ap_vld = ap_const_logic_1))) then 
                    err_ap_vld_preg <= err_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    err_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                err_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (err_ap_vld = ap_const_logic_1))) then 
                    err_preg <= err;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (dir_contor_ap_vld_in_sig = ap_const_logic_0) or (err_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                LastError <= tmp_fu_105_p1;
                SumError <= tmp_1_fu_125_p2;
                tmp_1_reg_280 <= tmp_1_fu_125_p2;
                tmp_2_reg_285 <= tmp_2_fu_141_p2;
                tmp_reg_275 <= tmp_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_6_reg_295 <= tmp_6_fu_163_p2;
                tmp_8_reg_300 <= tmp_8_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_s_reg_305 <= grp_fu_267_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, err_ap_vld_in_sig, dir_contor_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (dir_contor_ap_vld_in_sig = ap_const_logic_0) or (err_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    abs_fu_200_p3 <= 
        tmp_s_reg_305 when (abscond_fu_195_p2(0) = '1') else 
        neg_fu_190_p2;
    abscond_fu_195_p2 <= "1" when (signed(tmp_s_reg_305) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, err_ap_vld_in_sig, dir_contor_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (dir_contor_ap_vld_in_sig = ap_const_logic_0) or (err_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= abs_fu_200_p3(18 downto 3);
    dir <= (tmp_13_cast_fu_242_p3 xor tmp_11_fu_233_p1);

    dir_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dir_ap_vld <= ap_const_logic_1;
        else 
            dir_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dir_contor_ap_vld_in_sig_assign_proc : process(dir_contor_ap_vld, dir_contor_ap_vld_preg)
    begin
        if ((dir_contor_ap_vld = ap_const_logic_1)) then 
            dir_contor_ap_vld_in_sig <= dir_contor_ap_vld;
        else 
            dir_contor_ap_vld_in_sig <= dir_contor_ap_vld_preg;
        end if; 
    end process;


    dir_contor_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dir_contor_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dir_contor_blk_n <= dir_contor_ap_vld;
        else 
            dir_contor_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dir_contor_in_sig_assign_proc : process(dir_contor, dir_contor_preg, dir_contor_ap_vld)
    begin
        if ((dir_contor_ap_vld = ap_const_logic_1)) then 
            dir_contor_in_sig <= dir_contor;
        else 
            dir_contor_in_sig <= dir_contor_preg;
        end if; 
    end process;


    err_ap_vld_in_sig_assign_proc : process(err_ap_vld, err_ap_vld_preg)
    begin
        if ((err_ap_vld = ap_const_logic_1)) then 
            err_ap_vld_in_sig <= err_ap_vld;
        else 
            err_ap_vld_in_sig <= err_ap_vld_preg;
        end if; 
    end process;


    err_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, err_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            err_blk_n <= err_ap_vld;
        else 
            err_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    err_in_sig_assign_proc : process(err, err_preg, err_ap_vld)
    begin
        if ((err_ap_vld = ap_const_logic_1)) then 
            err_in_sig <= err;
        else 
            err_in_sig <= err_preg;
        end if; 
    end process;

    grp_fu_267_p1 <= tmp_reg_275(16 - 1 downto 0);
    grp_fu_267_p2 <= std_logic_vector(unsigned(tmp_6_reg_295) + unsigned(tmp_8_reg_300));
    neg_fu_190_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_reg_305));
    not_abscond_fu_236_p2 <= (ap_const_lv1_1 xor abscond_fu_195_p2);
    tmp_11_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dir_contor_in_sig),8));
    tmp_13_cast_fu_242_p3 <= 
        ap_const_lv8_FF when (not_abscond_fu_236_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_1_fu_125_p2 <= std_logic_vector(unsigned(SumError) + unsigned(tmp_fu_105_p1));
    tmp_2_fu_141_p2 <= std_logic_vector(signed(tmp_fu_105_p1) - signed(LastError));
    tmp_6_fu_163_p1 <= Ki;
    tmp_6_fu_163_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_reg_280) * signed(tmp_6_fu_163_p1))), 32));
    tmp_8_fu_172_p1 <= Kd;
    tmp_8_fu_172_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_2_reg_285) * signed(tmp_8_fu_172_p1))), 32));
        tmp_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(err_in_sig),32));

end behav;
